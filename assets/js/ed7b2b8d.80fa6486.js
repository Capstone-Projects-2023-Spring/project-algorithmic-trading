"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3961],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=d(a),u=r,m=c["".concat(l,".").concat(u)]||c[u]||p[u]||i;return a?n.createElement(m,s(s({ref:t},h),{},{components:a})):n.createElement(m,s({ref:t},h))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5531:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},s=void 0,o={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-algorithmic-trading/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-algorithmic-trading/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Sean Britt",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-algorithmic-trading/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-algorithmic-trading/docs/category/api-specification"}},l={},d=[{value:"Algorithms",id:"algorithms",level:3},{value:"Components and Interfaces",id:"components-and-interfaces",level:3},{value:"Client",id:"client",level:6},{value:"Server",id:"server",level:6},{value:"Database",id:"database",level:6},{value:"Class Diagram",id:"class-diagram",level:3},{value:"1. Thread",id:"1-thread",level:2},{value:"2. databaseThread",id:"2-databasethread",level:2},{value:"3. strategyThread",id:"3-strategythread",level:2},{value:"4. userThread",id:"4-userthread",level:2},{value:"5. SP500Strategy",id:"5-sp500strategy",level:2},{value:"6. longTermTradingStrategy",id:"6-longtermtradingstrategy",level:2},{value:"7. DayTradingStrategy",id:"7-daytradingstrategy",level:2},{value:"User Stories",id:"user-stories",level:3}],h={toc:d};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose")),(0,r.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Requirements")),(0,r.kt)("p",null,"In addition to the general requirements the Design Document - Part I Architecture will contain:"),(0,r.kt)("p",null,"A description the different components and their interfaces. For example: client, server, database."),(0,r.kt)("p",null,"For each component provide class diagrams showing the classes to be developed (or used) and their relationship."),(0,r.kt)("p",null,"Sequence diagrams showing the data flow for ",(0,r.kt)("em",{parentName:"p"},"all")," use cases.\xa0One sequence diagram corresponds to one use case and different use cases should have different corresponding sequence diagrams."),(0,r.kt)("p",null,"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."),(0,r.kt)("p",null,"If there is a database:"),(0,r.kt)("p",null,"Entity-relation diagram."),(0,r.kt)("p",null,"Table design."),(0,r.kt)("p",null,"A check list for architecture design is attached here ",(0,r.kt)("a",{parentName:"p",href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf"},"architecture","_","design","_","checklist.pdf"),"\xa0 and should be used as a guidance."),(0,r.kt)("p",null,"DELETE REQUIREMENTS LATER"),(0,r.kt)("h3",{id:"algorithms"},"Algorithms"),(0,r.kt)("p",null,"This application will utilize machine learning to make decisions on which stock to purchase. Stocks will be analyzed as discrete time data, and whether or not to purchase a stock will be determined by the stock's price, market cap, historical returns, volume of historical trades, alpha (excess return), beta (volatility) and any other quantitative data. This means we will be using technical anaylsis for our algorithms, which is best used in more short term trades. Essentially, the behavior of stock prices will be treated as a regression problem. In particular, there will be three trading strategies employed:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"S&P 500: Evaluate each stock comprising the S&P 500, determine its growth potential and sort each company in order of predicted growth. Then, if fractional shares are allowed, divide the user's capital and invest in each stock in proportion to its growth potential, i.e. if Apple is projected to be three times more likely to grow than Tesla, invest three times more money into Apple than Tesla. If fractional shaes are not allowed, then find every permutation of stocks that may be purchased from this list and chose the overall most profitable one."),(0,r.kt)("li",{parentName:"ol"},"Long Term: Analyze the stock market and flag certain stocks for growth, investing a specified percentage of the user's capital into each flagged stock. Then, once the stock is determined to no longer be growing, sell the stock."),(0,r.kt)("li",{parentName:"ol"},"Day Trading: Analyzing the stock market, find stocks that are currently growing and then immediately sell once the begin decreasing. This will be done at a high frequency.")),(0,r.kt)("p",null,"The success of these algorithms will be determined by how they perform in comparison to the S&P 500, root mean squared error, and mean absolute percent error."),(0,r.kt)("h3",{id:"components-and-interfaces"},"Components and Interfaces"),(0,r.kt)("p",null,"This application will use three different components: client, server, and database."),(0,r.kt)("h6",{id:"client"},"Client"),(0,r.kt)("p",null,"A React app. Upon logging in, the user has access to a graph that shows stock prices for the S&P 500 companies. The user can request a stock trading simulation. The simulation is meant to show users the amount of gain or loss that they would have had if they invested real money. To request a simulation, the user must first provide an investment value. The request is then sent to the server. The app also allows users to view the holdings and balances of the users that they are connected to. This allows users to compare their progress with others. The interface for this component is provided though UI elements that direct the user and capture their input."),(0,r.kt)("h6",{id:"server"},"Server"),(0,r.kt)("p",null,"A Django application. This component accesses stock data through an API (yahoo_fin, Alpha Vantage, or any other stock API) and sends it to the client. It also handles requests for simulations and runs those simulations in a multithreaded fashion. Each simulation runs in its own thread, with the simulation progress made available to the user upon request. This component handles the connection of users to each other, so that they can view each other's holdings and balances. The interface for this component is through HTTP requests coming from the client."),(0,r.kt)("h6",{id:"database"},"Database"),(0,r.kt)("p",null,"A PostgreSQL database. This component stores user login information as well as simulation information such as the user's simulated balance and holdings. It will also be used to cache stock market data obtained from API calls for fast retrieval, and to avoid exceeding API call limits. The interface for this component is through SQL queries coming from the server."),(0,r.kt)("h3",{id:"class-diagram"},"Class Diagram"),(0,r.kt)("mermaid",{value:"classDiagram\n\nclass  Thread  {\n\n<<interface>>\n\n+ __init__()\n\n+  start()\n\n+  run()\n\n+  join()\n\n+  is_alive()\n\n}\n\nclass  databaseThread  {\n\n#  String databaseURL\n\n#  String databasePassword\n\n#  String serverIP\n\n-  Connection connection\n\n-  Cursor cursor\n\n+  executeQuery() List~tuple~ return\n\n-  notifyWebsite()\n}\n\nclass  userThread{\n\n-  String username\n\n-  String password\n\n-  String quantConnectUsername\n\n-  String quantConnectPassword\n- String Strategy\n+  Dictionary~String stock, float percentAllocation~  Portfolio\n\n\n+  getPortfolio()\n\n+  recieveStrategy()\n\n+  requestTrade()\n\n+  updatePortfolio()\n\n}\n\nclass  strategyThread{\n\n<<interface>>\n\n-  Dictionary~String name, String value~  Parameters\n\n#  String AlphaVantageAPIKey\n\n-  List~tuple~  stockData\n\n+  Dictionary~String stock, float percentAllocation~  Strategy\n\n-  unpackParameters()\n\n+  recieveStockData()\n\n-  recordStockData()\n\n-  updateStrategy()\n\n}\n\nclass  SP500Strategy  {\n\n  \n\n}\n\nclass  longTermTradingStrategy{\n\nint plannedYearsInvested\n\nString riskLevel\n\n  \n\n}\n\nclass  DayTradingStrategy{\n\nfloat floorPercentage\n\nfloat benchmarkPercentage\n\n  \n\n}\nThread  <|--  userThread\n\nstrategyThread  <..  userThread\n\n\n  \n\nThread  <|--  databaseThread\n\n\nThread  <|--  strategyThread\n\nstrategyThread  <|--  SP500Strategy\n\nstrategyThread  <|--  longTermTradingStrategy\n\nstrategyThread  <|--  DayTradingStrategy\n\ndatabaseThread  <..  strategyThread"}),(0,r.kt)("h2",{id:"1-thread"},"1. Thread"),(0,r.kt)("p",null,"Taken from python library threading.  Documentation taken from man page:\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"init"),"()"),": Initializes the thread"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"start()"),":\nStart the thread\u2019s activity."),(0,r.kt)("p",null,"It must be called at most once per thread object. It arranges for the object\u2019s  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.run",title:"threading.Thread.run"},(0,r.kt)("inlineCode",{parentName:"a"},"run()")),"  method to be invoked in a separate thread of control."),(0,r.kt)("p",null,"This method will raise a  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/exceptions.html#RuntimeError",title:"RuntimeError"},(0,r.kt)("inlineCode",{parentName:"a"},"RuntimeError")),"  if called more than once on the same thread object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"run()"),":\nMethod representing the thread\u2019s activity."),(0,r.kt)("p",null,"You may override this method in a subclass. The standard  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.run",title:"threading.Thread.run"},(0,r.kt)("inlineCode",{parentName:"a"},"run()")),"  method invokes the callable object passed to the object\u2019s constructor as the  ",(0,r.kt)("em",{parentName:"p"},"target"),"  argument, if any, with positional and keyword arguments taken from the  ",(0,r.kt)("em",{parentName:"p"},"args"),"  and  ",(0,r.kt)("em",{parentName:"p"},"kwargs"),"  arguments, respectively."),(0,r.kt)("p",null,"Using list or tuple as the  ",(0,r.kt)("em",{parentName:"p"},"args"),"  argument which passed to the  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread",title:"threading.Thread"},(0,r.kt)("inlineCode",{parentName:"a"},"Thread")),"  could achieve the same effect."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"join()"),":\nWait until the thread terminates. This blocks the calling thread until the thread whose  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.join",title:"threading.Thread.join"},(0,r.kt)("inlineCode",{parentName:"a"},"join()")),"  method is called terminates \u2013 either normally or through an unhandled exception \u2013 or until the optional timeout occurs."),(0,r.kt)("p",null,"When the  ",(0,r.kt)("em",{parentName:"p"},"timeout"),"  argument is present and not  ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),", it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.join",title:"threading.Thread.join"},(0,r.kt)("inlineCode",{parentName:"a"},"join()")),"  always returns  ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),", you must call  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.is_alive",title:"threading.Thread.is_alive"},(0,r.kt)("inlineCode",{parentName:"a"},"is_alive()")),"  after  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.join",title:"threading.Thread.join"},(0,r.kt)("inlineCode",{parentName:"a"},"join()")),"  to decide whether a timeout happened \u2013 if the thread is still alive, the  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.join",title:"threading.Thread.join"},(0,r.kt)("inlineCode",{parentName:"a"},"join()")),"  call timed out."),(0,r.kt)("p",null,"When the  ",(0,r.kt)("em",{parentName:"p"},"timeout"),"  argument is not present or  ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),", the operation will block until the thread terminates."),(0,r.kt)("p",null,"A thread can be joined many times."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.join",title:"threading.Thread.join"},(0,r.kt)("inlineCode",{parentName:"a"},"join()")),"  raises a  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/exceptions.html#RuntimeError",title:"RuntimeError"},(0,r.kt)("inlineCode",{parentName:"a"},"RuntimeError")),"  if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.join",title:"threading.Thread.join"},(0,r.kt)("inlineCode",{parentName:"a"},"join()")),"  a thread before it has been started and attempts to do so raise the same exception."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"is_alive()"),":\nReturn whether the thread is alive."),(0,r.kt)("p",null,"This method returns  ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),"  just before the  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.run",title:"threading.Thread.run"},(0,r.kt)("inlineCode",{parentName:"a"},"run()")),"  method starts until just after the  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.Thread.run",title:"threading.Thread.run"},(0,r.kt)("inlineCode",{parentName:"a"},"run()")),"  method terminates. The module function  ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/threading.html#threading.enumerate",title:"threading.enumerate"},(0,r.kt)("inlineCode",{parentName:"a"},"enumerate()")),"  returns a list of all alive threads."),(0,r.kt)("h2",{id:"2-databasethread"},"2. databaseThread"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"executeQuery(String query)"),":\nTakes in query to be run, runs query on database, returns query output as a list of tuples, with each\ntuple corresponding to a row.",(0,r.kt)("br",{parentName:"p"}),"\n","This function will be used to update user/stock data as well as return such data to user and strategy threads.\n",(0,r.kt)("strong",{parentName:"p"},"notifyWebsite()"),":\nThread is connected to website with websocket, after query has been run to update the database, sends\nnotification for page to refresh and display new data."),(0,r.kt)("h2",{id:"3-strategythread"},"3. strategyThread"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"unpackParameters()"),":\nParameters passed to each of the threads that implement this class will be different, but all parameters will be passed in by dictionary.  Takes elements of key;value pairs and update local variables.\n",(0,r.kt)("strong",{parentName:"p"},"recieveStockData()"),":\nMakes API call to AlphaVantage will APIKey to gather stock information on stocks relevant to Strategy,\n",(0,r.kt)("strong",{parentName:"p"},"recordStockData()"),":\nStores gathered stock data into historical record sending query to database thread to update relevant tables\n",(0,r.kt)("strong",{parentName:"p"},"updateStrategy()"),":\nBased on gathered stock data, determination is made on which stocks to include in recommended portfolio for strategy"),(0,r.kt)("h2",{id:"4-userthread"},"4. userThread"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"updatePortfolio()"),":\nMain task for thread, initially calls ",(0,r.kt)("strong",{parentName:"p"},"getPortfolio()")," to store current holdings in thread, then calls ",(0,r.kt)("strong",{parentName:"p"},"recieveStrategy")," to determine if updates must be made.\n",(0,r.kt)("strong",{parentName:"p"},"getPortfolio()"),":\nGets current portfolio for user from QuantConnect API, takes amount of holdings in all stocks and converts\ncurrent value to percentage of all holdings to store in portfolio dictionary.\n",(0,r.kt)("strong",{parentName:"p"},"recieveStrategy()"),":\nBased on selected strategy for user, Strategy is gathered from strategy thread.  If there are any changes to current strategy, trades are requested through the ",(0,r.kt)("strong",{parentName:"p"},"requestTrade()")," function.\n",(0,r.kt)("strong",{parentName:"p"},"requestTrade()"),":\nUsing QuantConnection API, trades are performed until current portfolio matches portfolio recieved from strategy thread.",(0,r.kt)("br",{parentName:"p"}),"\n","As each API call is made, thread waits until confirmation of trade is completed before next trade is initiated for current user.",(0,r.kt)("br",{parentName:"p"}),"\n","If trade fails, a new trade will instead be requested to move money into a money market account until next trade request is made, at which point the stocks in portfolio will attempt to be purchased again"),(0,r.kt)("h2",{id:"5-sp500strategy"},"5. SP500Strategy"),(0,r.kt)("p",null,"This is our most basic trading strategy.  The strategy does not factor any user parameters into strategy, determination of how strategy is made is yet to be determined in detail."),(0,r.kt)("h2",{id:"6-longtermtradingstrategy"},"6. longTermTradingStrategy"),(0,r.kt)("p",null,"Takes into account different time horizons for when users are expecting to sell off stocks, and level of risk depending on user preference.",(0,r.kt)("br",{parentName:"p"}),"\n","While the code for determining the trading strategy will be complex, no unique functions will be created other than those defined in the strategyThread interface that this class implements."),(0,r.kt)("h2",{id:"7-daytradingstrategy"},"7. DayTradingStrategy"),(0,r.kt)("p",null,"Similarly to our other two trading strategies, no additional functions are implemented, but user's selection of what their largest threshold is for loss, stored as ",(0,r.kt)("em",{parentName:"p"},"floorPercentage"),", and what percentage gain at which point they wish to sell, ",(0,r.kt)("em",{parentName:"p"},"benchmarkPercentage"),", are taken into consideration in ",(0,r.kt)("strong",{parentName:"p"},"updateStrategy()")," function."),(0,r.kt)("h3",{id:"user-stories"},"User Stories"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," 1. "),"  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," 2. "),"  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," 3. "),(0,r.kt)("br",{parentName:"p"}),"\n","User 3 uses Tradester's Investment Report to view how their investment is doing"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    actor us as user3\n    participant wa as web application\n    participant sv as server\n    participant db as database\n\n    us ->>+ wa: click \"Investment Report\" button\n    wa --\x3e> us: display dropdown of investment accounts\n    us ->> wa: choose investment to display\n    wa ->>+ sv: send GET request for the particular investment to server \n    sv ->>+ db: find user's investment information\n    db --\x3e>- sv: return user's investment information\n    sv --\x3e>- wa: return user's investment information\n    wa ->> wa: build graph of investment information\n    wa --\x3e>- us: display graph\n"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," 4. "),(0,r.kt)("br",{parentName:"p"}),"\n","User 4 uses Tradester to make manual trades"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    actor us as user4\n    participant wa as web application\n    participant sv as server\n    participant db as database\n    participant api as API(Alpha Vantage or yahoo_fin)\n    participant qc as QuantConnect(optional)\n\n    us ->>+ wa: click \"Account Selector\" button\n    wa --\x3e> us: display dropdown of investment accounts\n    us ->> wa: click \"Long Term\" button\n    wa ->>+ sv: send GET request for the user's long term investment to server \n    sv ->>+ db: find user's investment information\n    db --\x3e>- sv: return user's investment information\n    sv --\x3e>+api: request stats of the S&P 500\n    api--\x3e>-sv: return stats of S&P 500\n    sv ->> sv: sort the S&P 500 stats, weighted by performance\n    sv --\x3e>- wa: return user's investment information and the sorted stock data\n    wa ->> wa: build graph of investment information\n    wa --\x3e> us: display graph showing user's investments \n    wa --\x3e> us: display list of S&P 500 stocks \n    us --\x3e>+ us: decide stocks to purchase\n    us ->>+ wa: select stock and amount to purchase\n    wa ->>+ sv: update user's Long Term portfolio with new info\n    sv ->> sv: package the investment update to send\n    sv ->>+ qc: PUT request to purchase new stocks\n    qc --\x3e>- sv: return receipt of purchase\n    sv ->>+ db: update Long Term financial info for user\n    db ->>- sv: return receipt of completion of update\n    sv --\x3e>- wa: return receipt of completion of purchase and databse update\n    wa --\x3e>- us: display message of completion of purchase to user"}))}c.isMDXComponent=!0}}]);